#!/usr/bin/env python3
"""
Script para criar dashboard autom√°tico no Power BI
Gera instru√ß√µes espec√≠ficas com base nos dados atuais
"""

import json
import requests
from datetime import datetime

def get_current_data():
    """Busca dados atuais da API"""
    try:
        response = requests.get("http://localhost:5000/api/analytics/summary")
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def create_powerbi_instructions():
    """Cria instru√ß√µes espec√≠ficas para criar dashboard"""
    
    print("=" * 60)
    print("üéØ CRIANDO DASHBOARD AUTOM√ÅTICO POWER BI")
    print("=" * 60)
    
    # Buscar dados atuais
    data = get_current_data()
    if not data:
        print("‚ùå Erro: API n√£o est√° funcionando")
        return
    
    summary = data.get('summary', {})
    distributions = data.get('distributions', {})
    
    print("\nüìä DADOS ENCONTRADOS:")
    print(f"   ‚Ä¢ Receita Total: R$ {summary.get('total_revenue', 0):,}")
    print(f"   ‚Ä¢ Taxa Convers√£o: {summary.get('conversion_rate', 0)}%")
    print(f"   ‚Ä¢ Trabalhos Fechados: {summary.get('total_closed_jobs', 0)}")
    print(f"   ‚Ä¢ Ticket M√©dio: R$ {summary.get('avg_project_value', 0):,}")
    
    print("\n" + "=" * 60)
    print("üöÄ INSTRU√á√ïES PARA CRIAR DASHBOARD AUTOM√ÅTICO")
    print("=" * 60)
    
    print("\n1. PRIMEIRO: Clique em 'Fechar e Aplicar' no Power Query")
    print("   (Para sair do editor e voltar para tela principal)")
    
    print("\n2. DEPOIS: Vou te dar comandos espec√≠ficos para cada gr√°fico")
    
    # Instru√ß√µes espec√≠ficas baseadas nos dados
    print("\n" + "-" * 50)
    print("üìà GR√ÅFICO 1: CART√ÉO RECEITA TOTAL")
    print("-" * 50)
    print("‚Ä¢ Na √°rea 'Campos' (direita), procure: 'summary.total_revenue'")
    print("‚Ä¢ ARRASTE para o canvas (√°rea central)")
    print("‚Ä¢ Power BI criar√° um n√∫mero grande automaticamente")
    print("‚Ä¢ Clique no gr√°fico ‚Üí Painel 'Visualiza√ß√µes' ‚Üí √çcone 'Cart√£o'")
    print(f"‚Ä¢ Deve mostrar: R$ {summary.get('total_revenue', 0):,}")
    
    print("\n" + "-" * 50)
    print("üìä GR√ÅFICO 2: CART√ÉO TAXA CONVERS√ÉO")
    print("-" * 50)
    print("‚Ä¢ Procure: 'summary.conversion_rate'")
    print("‚Ä¢ ARRASTE para o canvas (ao lado do primeiro)")
    print("‚Ä¢ Mude para 'Cart√£o' se necess√°rio")
    print(f"‚Ä¢ Deve mostrar: {summary.get('conversion_rate', 0)}%")
    
    print("\n" + "-" * 50)
    print("üéØ GR√ÅFICO 3: CART√ÉO TRABALHOS FECHADOS")
    print("-" * 50)
    print("‚Ä¢ Procure: 'summary.total_closed_jobs'")
    print("‚Ä¢ ARRASTE para o canvas")
    print("‚Ä¢ Mude para 'Cart√£o'")
    print(f"‚Ä¢ Deve mostrar: {summary.get('total_closed_jobs', 0)}")
    
    print("\n" + "-" * 50)
    print("üí∞ GR√ÅFICO 4: CART√ÉO TICKET M√âDIO")
    print("-" * 50)
    print("‚Ä¢ Procure: 'summary.avg_project_value'")
    print("‚Ä¢ ARRASTE para o canvas")
    print("‚Ä¢ Mude para 'Cart√£o'")
    print(f"‚Ä¢ Deve mostrar: R$ {summary.get('avg_project_value', 0):,}")
    
    # Gr√°ficos mais complexos
    print("\n" + "-" * 50)
    print("ü•ß GR√ÅFICO 5: PIZZA - RECEITA POR SERVI√áO")
    print("-" * 50)
    print("‚Ä¢ Clique em √°rea vazia do canvas")
    print("‚Ä¢ No painel 'Visualiza√ß√µes' ‚Üí Clique no √≠cone 'Gr√°fico de Pizza'")
    print("‚Ä¢ ARRASTE campos das distribui√ß√µes by_service para:")
    print("  - Legenda: tipos de servi√ßo")
    print("  - Valores: valores de receita")
    
    if 'by_service' in distributions:
        services = distributions['by_service']
        print("‚Ä¢ Dados que aparecer√£o:")
        for service, data in services.items():
            print(f"  - {service}: R$ {data.get('revenue', 0):,}")
    
    print("\n" + "-" * 50)
    print("üìä GR√ÅFICO 6: COLUNAS - RECEITA POR LOCALIZA√á√ÉO")
    print("-" * 50)
    print("‚Ä¢ Clique em √°rea vazia")
    print("‚Ä¢ Selecione 'Gr√°fico de Colunas Agrupadas'")
    print("‚Ä¢ ARRASTE campos das distribui√ß√µes by_location")
    
    if 'by_location' in distributions:
        locations = distributions['by_location']
        print("‚Ä¢ Dados que aparecer√£o:")
        for location, data in locations.items():
            location_name = {'SP': 'Capital', 'interior': 'Interior', 'remoto': 'Remoto'}.get(location, location)
            print(f"  - {location_name}: R$ {data.get('revenue', 0):,}")
    
    print("\n" + "=" * 60)
    print("‚úÖ RESULTADO FINAL:")
    print("=" * 60)
    print("Voc√™ ter√° um dashboard com:")
    print("‚Ä¢ 4 cart√µes com KPIs principais")
    print("‚Ä¢ 1 gr√°fico pizza com receita por servi√ßo")
    print("‚Ä¢ 1 gr√°fico colunas com receita por localiza√ß√£o")
    print("‚Ä¢ Dados atualizados em tempo real")
    
    print("\nüéØ DICA: Comece pelos cart√µes (mais f√°cil)")
    print("üìû ME CHAME se tiver d√∫vida em qualquer passo!")
    
    # Salvar instru√ß√µes em arquivo
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"PowerBI_Instructions_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("INSTRU√á√ïES DASHBOARD POWER BI\n")
        f.write("=" * 50 + "\n\n")
        f.write("URL dos dados: http://localhost:5000/api/analytics/summary\n\n")
        f.write("CAMPOS PRINCIPAIS:\n")
        f.write("‚Ä¢ summary.total_revenue (Receita Total)\n")
        f.write("‚Ä¢ summary.conversion_rate (Taxa Convers√£o)\n")
        f.write("‚Ä¢ summary.total_closed_jobs (Trabalhos Fechados)\n")
        f.write("‚Ä¢ summary.avg_project_value (Ticket M√©dio)\n\n")
        f.write("DISTRIBUI√á√ïES:\n")
        f.write("‚Ä¢ distributions.by_service (Por Servi√ßo)\n")
        f.write("‚Ä¢ distributions.by_location (Por Localiza√ß√£o)\n")
        f.write("‚Ä¢ distributions.by_budget (Por Faixa Or√ßamento)\n")
    
    print(f"\nüìÑ Instru√ß√µes salvas em: {filename}")

if __name__ == "__main__":
    create_powerbi_instructions()